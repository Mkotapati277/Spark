package pack
import org.apache.hadoop.hive.ql.exec.UDF
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import scala.io.Source
import org.apache.spark.sql.types.{HIVE_TYPE_STRING, IntegerType}
import org.apache.spark.sql.{Row, SparkSession, functions => F}
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.expressions
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.functions.{coalesce, col, count, dense_rank, exp, expr, monotonically_increasing_id, row_number, sum, to_date, window}
import org.apache.spark.sql.functions._
object Secanriospratice {
  def main(Args:Array[String]):Unit= {
    println("======Hello=======")
    val conf = new SparkConf().setAppName("first").setMaster("local[*]")
      .set("spark.driver.host", "localhost")
      .set("spark.driver.allowMultipleContexts", "true")
    val sc = new SparkContext(conf)
    sc.setLogLevel("ERROR")
    val spark = SparkSession.builder.getOrCreate()
    import spark.implicits._
    // Define the data
    val data = Seq(
      (1, "Mark Ray", "AB"),
      (2, "Peter Smith", "CD"),
      (1, "Mark Ray", "EF"),
      (2, "Peter Smith", "GH"),
      (2, "Peter Smith", "CD"),
      (3, "Kate", "IJ")
    ).toDF("CustId", "CustName", "Address")
    data.show()
val res = data.groupBy("CustId","CustName").agg(collect_list("Address").as("Addresslist")).orderBy(asc("CustId"))
    res.show()


    }
}
