package pack
import org.apache.hadoop.hive.ql.exec.UDF
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext

import scala.io.Source
import org.apache.spark.sql.types.{HIVE_TYPE_STRING, IntegerType}
import org.apache.spark.sql.{Row, SparkSession}
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.expressions
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.functions.{coalesce, col, count, dense_rank, exp, expr, monotonically_increasing_id, row_number, sum, to_date, window}
import org.apache.spark.sql.functions._

object Secanriospratice {
  def main(Args:Array[String]):Unit= {
    println("======Hello=======")
    val conf = new SparkConf().setAppName("first").setMaster("local[*]")
      .set("spark.driver.host", "localhost")
      .set("spark.driver.allowMultipleContexts", "true")
    val sc = new SparkContext(conf)
    sc.setLogLevel("ERROR")
    val spark = SparkSession.builder.getOrCreate()
    import spark.implicits._
    // Sample data
    val data = Seq(
      ("Renuka1992@gmail.com", "9856765434"),
      ("anbu.arasu3@gmail.com", "9844567788")).toDF("Mail", "mob")
    data.show(false)
 val mskedemail = data.withColumn("Mail", regexp_replace($"Mail","(?<=.{1}).(?=.*@)","*"))
 val maskedmob = mskedemail.withColumn("mob",regexp_replace($"mob", "(?<=\\d{2})\\d(?=\\d{2})","*" ))
    maskedmob.show()


    }
}
