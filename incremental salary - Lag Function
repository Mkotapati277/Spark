package pack
import org.apache.hadoop.hive.ql.exec.UDF
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import scala.io.Source
import org.apache.spark.sql.types.{HIVE_TYPE_STRING, IntegerType}
import org.apache.spark.sql.{Row, SparkSession, functions => F}
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.expressions
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.types.{StructType, StructField, IntegerType, StringType}
import org.apache.spark.sql.functions.{coalesce, col, count, dense_rank, exp, expr, monotonically_increasing_id, row_number, sum, to_date, window}
import org.apache.spark.sql.functions._
object Secanriospratice {
  def main(Args:Array[String]):Unit= {
    println("======Hello=======")
    val conf = new SparkConf().setAppName("first").setMaster("local[*]")
      .set("spark.driver.host", "localhost")
      .set("spark.driver.allowMultipleContexts", "true")
    val sc = new SparkContext(conf)
    sc.setLogLevel("ERROR")
    val spark = SparkSession.builder.getOrCreate()
    import spark.implicits._
    // Sample employee salary data
    val salarydf = Seq(
      (1, 80000, 2020),
      (1, 70000, 2019),
      (1, 60000, 2018),
      (2, 65000, 2020),
      (2, 65000, 2019),
      (2, 60000, 2018),
      (3, 65000, 2019),
      (3, 60000, 2018)).toDF("employee_id", "salary", "year")
    salarydf.show()
val windoespec = Window.partitionBy("employee_id").orderBy("year")

    val df = salarydf.withColumn("lag",lag("salary",1).over(windoespec)).orderBy("employee_id")
    df.show()
     val  findf = df.withColumn("incremental_sal", $"salary" - $"lag").drop("lag")

    findf.show()

  }
}
