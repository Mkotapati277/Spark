package pack
import org.apache.hadoop.hive.ql.exec.UDF
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import scala.io.Source
import org.apache.spark.sql.types.{HIVE_TYPE_STRING, IntegerType}
import org.apache.spark.sql.{Row, SparkSession, functions => F}
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.expressions
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.functions.{coalesce, col, count, dense_rank, exp, expr, monotonically_increasing_id, row_number, sum, to_date, window}
import org.apache.spark.sql.functions._
object Secanriospratice {
  def main(Args:Array[String]):Unit= {
    println("======Hello=======")
    val conf = new SparkConf().setAppName("first").setMaster("local[*]")
      .set("spark.driver.host", "localhost")
      .set("spark.driver.allowMultipleContexts", "true")
    val sc = new SparkContext(conf)
    sc.setLogLevel("ERROR")
    val spark = SparkSession.builder.getOrCreate()
    import spark.implicits._
    // Sample data
    val data = Seq(
      ("ravi", "pune,delhi,chennai,noida", 32),
      ("gautham", "delhi,chennai", 30),
      ("mary", "noida,pune", 35),
      ("thomas", "delhi,pune", 31),
      ("shankar", "chennai,noida", 30) ).toDF("name", "travel_location", "age")

data.show(false)

    val expdf = data.withColumn("location",split($"travel_location",","))
      .withColumn("location",explode($"location"))
    expdf.show(false)

    // Count the frequency of each location
    val locationFrequency = expdf
      .groupBy("location")
      .agg(F.count("name").alias("count"))
      .orderBy(F.col("count").desc)
    locationFrequency.show()

    // Get the most frequently visited locations
    val mostFrequentLocations = locationFrequency
      .limit(1)
      .select("location")
      .as[String]
      .collect()
      .toSet

    // Find names associated with the most frequently visited locations
    val namesWithMostFrequentLocations = expdf
      .filter(F.col("location").isin(mostFrequentLocations.toSeq: _*))
      .select("name")
      .distinct()

    namesWithMostFrequentLocations.show(false)

    }
}
