package pack
import org.apache.hadoop.hive.ql.exec.UDF
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import scala.io.Source
import org.apache.spark.sql.types.{HIVE_TYPE_STRING, IntegerType}
import org.apache.spark.sql.types._
import org.apache.spark.sql.{Row, SparkSession, functions => F}
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.expressions
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.types.{StructType, StructField, IntegerType, StringType}
import org.apache.spark.sql.functions.{coalesce, col, count, dense_rank, exp, expr, monotonically_increasing_id, row_number, sum, to_date, window}
import org.apache.spark.sql.functions._
object Secanriospratice {
  def main(Args:Array[String]):Unit= {
    println("======Hello=======")
    val conf = new SparkConf().setAppName("first").setMaster("local[*]")
      .set("spark.driver.host", "localhost")
      .set("spark.driver.allowMultipleContexts", "true")
    val sc = new SparkContext(conf)
    sc.setLogLevel("ERROR")
    val spark = SparkSession.builder.getOrCreate()
    import spark.implicits._
     val data =Seq(
    ("2024-08-20", "Apple"),
    ("2024-08-20", "Banana"),
    ("2024-08-20", "Apple"),
    ("2024-08-20", "Orange"),
    ("2024-08-20", "Banana"),
    ("2024-08-21", "Grape"),
    ("2024-08-21", "Apple"),
    ("2024-08-21", "Orange"),
    ("2024-08-21", "Orange"),
    ("2024-08-21", "Banana"),
    ("2024-08-21", "Banana"),
    ("2024-08-21", "Grape")).toDF("date","items")
    data.show()

    val countdf = data.groupBy("date","items").count()
    countdf.show()

    val windospec = Window.partitionBy("date").orderBy($"count".desc)
 val rankdf = countdf.withColumn("rank",rank().over(windospec))
    rankdf.show()
    val findf = rankdf.filter($"rank" === 1 ).select("date","items","count")
    findf.show()




  }
}
