package pack
import org.apache.hadoop.hive.ql.exec.UDF
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import scala.io.Source
import org.apache.spark.sql.types.{HIVE_TYPE_STRING, IntegerType}
import org.apache.spark.sql.{Row, SparkSession, functions => F}
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.expressions
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.types.{StructType, StructField, IntegerType, StringType}
import org.apache.spark.sql.functions.{coalesce, col, count, dense_rank, exp, expr, monotonically_increasing_id, row_number, sum, to_date, window}
import org.apache.spark.sql.functions._
object Secanriospratice {
  def main(Args:Array[String]):Unit= {
    println("======Hello=======")
    val conf = new SparkConf().setAppName("first").setMaster("local[*]")
      .set("spark.driver.host", "localhost")
      .set("spark.driver.allowMultipleContexts", "true")
    val sc = new SparkContext(conf)
    sc.setLogLevel("ERROR")
    val spark = SparkSession.builder.getOrCreate()
    import spark.implicits._
    // Sample order data
    val data = Seq(
      (11111, "2021-01-15", 10),
      (11111, "2021-01-16", 15),
      (11111, "2021-01-17", 20),
      (11112, "2021-01-15", 10),
      (11112, "2021-01-16", 15),
      (11112, "2021-01-17", 20)).toDF("sensorid", "timestamp", "values")
  data.show()
    val windowspec1 = Window.partitionBy("sensorid").orderBy("timestamp")

    val df = data.withColumn("row",row_number().over(windowspec1))
                 .withColumn("values",when($"row"isin(1,2) , $"values"-5).otherwise($"values"))
                  .filter($"row"isin(1,2)).drop("row")
        df.show()


  }
}
