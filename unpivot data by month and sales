package pack
import org.apache.hadoop.hive.ql.exec.UDF
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import scala.io.Source
import org.apache.spark.sql.types.{HIVE_TYPE_STRING, IntegerType}
import org.apache.spark.sql.types._
import org.apache.spark.sql.{Row, SparkSession, functions => F}
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.expressions
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.types.{StructType, StructField, IntegerType, StringType}
import org.apache.spark.sql.functions.{coalesce, col, count, dense_rank, exp, expr, monotonically_increasing_id, row_number, sum, to_date, window}
import org.apache.spark.sql.functions._
object Secanriospratice {
  def main(Args:Array[String]):Unit= {
    println("======Hello=======")
    val conf = new SparkConf().setAppName("first").setMaster("local[*]")
      .set("spark.driver.host", "localhost")
      .set("spark.driver.allowMultipleContexts", "true")
    val sc = new SparkContext(conf)
    sc.setLogLevel("ERROR")
    val spark = SparkSession.builder.getOrCreate()
    import spark.implicits._
    // Define the data as a Seq of tuples
    val df = Seq(
      ("Product1", 100, 150, 200),
      ("Product2", 200, 250, 300),
      ("Product3", 300, 350, 400)).toDF("Product", "Sales_Jan", "Sales_Feb", "Sales_Mar")

df.show()

   val newdf = df.select($"product",$"Sales_Jan".as("sales"),lit("jan").as("month"))
     .union(df.select($"product",$"Sales_Feb".as("sales"),lit("feb").as("month")))
     .union(df.select($"product",$"Sales_Mar".as("sales"),lit("mar").as("month")))

    newdf.show()

  }
}
